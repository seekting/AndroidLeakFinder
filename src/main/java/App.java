import com.squareup.leakcanary.AnalysisResult;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    private static Map<String, String> s_CMD_MAP = new HashMap<>();

    public static void main(String args[]) {
        if (args == null || args.length == 0) {
            help();
        }
        for (int i = 0; i < args.length; i = i + 2) {
            int j = i + 1;
            String value = "";
            if (j < args.length) {
                value = args[j];
            }
            s_CMD_MAP.put(args[i], value);
        }
        List<AnalysisResult> results = null;
        LeakFinder leakFinder = null;
        if (s_CMD_MAP.containsKey("-t")) {
            leakFinder = new TargetActivityFinder();


        } else if (s_CMD_MAP.containsKey("-p")) {
            leakFinder = new DestroyedActivityLeakFinder();

        } else if (s_CMD_MAP.containsKey("-l")) {
            leakFinder = new LastHprofFinder();
        }
        if (leakFinder != null) {
            leakFinder.prepare(s_CMD_MAP);
            results = leakFinder.find();
            saveResults(results);
        }
    }

    private static void saveResults(List<AnalysisResult> results) {
        if (results != null) {
            String timeStr = DestroyedActivityLeakFinder.SIMPLE_DATE_FORMAT.format(new Date());
            File dir = new File("result");
            if (!dir.exists()) {
                dir.mkdirs();
            }
            try {
                File file = new File(dir, "result_" + timeStr + ".txt");
                FileWriter fileWriter = new FileWriter(file);
                for (AnalysisResult result : results) {
                    if (result != null) {
                        if (result.leakTrace != null) {
                            fileWriter.write(result.leakTrace.toString());
                            System.out.println(result.leakTrace);
                        }
                    }
                }
                System.out.println("saved result:" + file);
                fileWriter.flush();
                fileWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }

        } else {
            System.out.println("results = null!");
        }
    }

    private static void help() {
        System.out.println("");
        System.out.println(">>>>>>>>Android Leak Finder<<<<<<<<<<");
        System.out.println("1. 找指定的类:App -t pkg.xxxActivity -f xxx.hprof");
        System.out.println("   -t: 类名 ");
        System.out.println("   -f: hprof文件名");
        System.out.println("2. 自动查找包名下的Activity内存泄露:App -p pkg");
        System.out.println("   -p: package name");
        System.out.println("3. analyzer last:App -l");
        System.out.println("   -l:last ");
        System.out.println("-h: 帮助");
        System.out.println("======================================");

    }


}
